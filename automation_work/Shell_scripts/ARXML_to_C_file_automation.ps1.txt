
function Alert_Message($message)
{
	#Alert user
	$wshell = New-Object -ComObject wscript.shell
	$wshell.Popup($message,15,"Message",0)
}

function Node_not_exist_check
{
	#Check if the node already exists in project by comparing it to all nodes in GRA xml
	foreach($Calc_GRA in $MainDB_GRA.DIAG.PRJ_NODES.PRJ_NODE) 
	{
		$LinkNode  = $Calc_GRA.SelectSingleNode("NODE_REF")
		[string]$NodeName_GRA = $LinkNode.InnerText
		
		
		if($Node -eq $NodeName_GRA)
		{
			#return the value of $Node_not_exist as 0
			return 0
	
		}#End of If
	}#End of For
	
	#If its new node, then return value 1 so xml update happens
	return 1
}

function FW_not_exist_check($k)
{
#This can only be used in the For where $m is defined: pass '$m' as input to function $k

	#Check if the FW already exists in project
	foreach($Calc_FW in $MainDB_Node.DIAG.NODES.NODE) 
	{
		$LinkNode  = $Calc_FW.SelectSingleNode("FW_REFS")
		foreach($Calc_FW1 in $LinkNode.FW_REF)
		{
			[string]$FWName_NodeXml = $Calc_FW1.InnerText
			
			
			if($FWname[$k] -eq $FWName_NodeXml)
			{
				#return the value of $FW_not_exist_in_xmlfileNode as 0
				return 0
		
			}#End of If
		}
	}#End of For
	
	#If its new FW, then return value 1 so xml update happens
	return 1
}



function FW_not_active_check($k)
{
	#Check if the FW already exists in project
	foreach($Calc_FW in $MainDB_FWused.DIAG.FW_LINKS.FW_LINK_PRJ_USEDFLAGS.FW_LINK_PRJ_USEDFLAG) 
	{
		[String]$Name = $Calc_FW.FW_REF
		if($FWname[$k] -eq $Name)
		{
			if($Calc_FW.USED -eq 'true')
			{
				#FW is present and active in project
				return 2
			}
			else
			{
				#if FW is present but not active
				return 5
			}
		}	
	}#End of For
}


function Update_already_present_FWused_as_true
{
	foreach($Calc_FW in $MainDB_FWused.DIAG.FW_LINKS.FW_LINK_PRJ_USEDFLAGS.FW_LINK_PRJ_USEDFLAG) 
	{
		[String]$Name = $Calc_FW.FW_REF
		if($FWname -eq $Name)
		{
			if($Calc_FW.USED -ne 'true')
			{
				#Update the USED value as 'true'
				$Calc_FW.USED = "true"
				$MainDB_FWused.Save($FileName_FWused)
			}
		}	
	}#End of For
}


function Update_FW_USED
{
	[System.Collections.ArrayList]$file = Get-Content $FileName_FWused
	for ($j=0; $j -lt $file.count; $j++)
	{
	  if ($file[$j] -match $pattern6) {
		$insert += $j #Record the position of the line
	  }
	}
	$FW_data_BsSw_AppSw = $FW_data_BsSw_AppSw.Trim("`r?`n") #Remove new-line character at beginning and end
	$insert | Sort-Object -Descending | ForEach-Object { $file.insert($_,$FW_data_BsSw_AppSw) }
	Set-Content $FileName_FWused $file	

	$j=0
	$insert= @()
}


function Update_Dummy_Dcode
{
	#Update Dcode link file
	$insert = @()
	[System.Collections.ArrayList]$file = Get-Content $Dcodelink
	for ($j=0; $j -lt $file.count; $j++)
	{
	  if ($file[$j] -match $pattern4) {
		$insert += $j #Record the position of the line
	  }
	}		
	$Dcode_FW = $Dcode_FW.Trim("`r?`n") #Remove new-line character at beginning and end
	$insert | Sort-Object -Descending | ForEach-Object { $file.insert($_,$Dcode_FW) }
	Set-Content $Dcodelink $file		
	$j=0
	$insert= @()
}

function Update_Node
{
	#Update the Node file
	[System.Collections.ArrayList]$file = Get-Content $FileName_Node
	$insert = @()

	for ($j=0; $j -lt $file.count; $j++) 
	{
	  if($file[$j] -match $pattern5)
	  {
		for($p=$j; $p -lt 30; $p++)
		{
			if($file[$p] -match '<FW_REFS>'){
			$insert += $p + 1
			$Node_data = $FW_data_for_Node.TrimEnd("`r?`n")
			}
		}
	  }
	  else
	  {
		if ($file[$j] -match $pattern3) {
			$insert += $j #Record the position of the line
		}
	  }
	}
	#Now loop the recorded array positions and insert the new text
	$insert | Sort-Object -Descending | ForEach-Object { $file.insert($_,$Node_data) }

	Set-Content $FileName_Node $file
	$j = 0
	$Node_data = ''
	$FW_data_for_Node = ''		#Clearing here is not working ! Still kept as dummy.
	$pattern5 = ''
	$insert = @()
}


function Update_GRA_SourceTarget
{
	$insert = @()
	[System.Collections.ArrayList]$file = Get-Content $FileName_GRA
	#Update the parent-child node connection part (first part in GRA xml)
	for ($i=0; $i -lt $file.count; $i++)
	{
	  if ($file[$i] -match $pattern1) {
		$insert += $i #Record the position of the line
	  }
	}
	#Now loop the recorded array positions and insert the new text
	$GRA_Node_data = $GRA_Node_data.TrimEnd("`r?`n") #Remove new-line character at end
	$insert | Sort-Object -Descending | ForEach-Object { $file.insert($_,$GRA_Node_data) }

	Set-Content $FileName_GRA $file
	#Reset contents after write
	$i = 0
	$GRA_Node_data = ''
	$insert = @()
}



function Update_GRA_Coordinates
{
	#Update the GRA coordinate part
	[System.Collections.ArrayList]$file = Get-Content $FileName_GRA
	$insert = @()

	for ($j=0; $j -lt $file.count; $j++) {
	  if ($file[$j] -match $pattern2) {
		$insert += $j #Record the position of the line
	  }
	}
	#Now loop the recorded array positions and insert the new text
	$insert | Sort-Object -Descending | ForEach-Object { $file.insert($_,$GRA_data) }

	Set-Content $FileName_GRA $file
	#Reset contents after write
	$j = 0
	$GRA_data = ''
	$insert = @()
}



function Update_single_FWdetails_to_node
{
	#Yet to be developed
}



##################################################
#...............Start of script.................!#
##################################################

#Get the details from bat file
$BuildCount = $args[0]
$project = $args[1]

#**************************************************************************************
#Select Product line
switch($BuildCount)	#Project1=1, Project2=2, both Project1+Project2=4
{
	1{
		#Dont use for Project_mr now
		if($project -eq 'Project_mr')
		{
			$Build_variant = 'Type1'
			$variant = 'esp'
			$variant_path = 'Diamant_Type1'
		}
		#Developed for Type3, only use this now
		if($project -eq 'Type3')
		{
			$Build_variant = 'Project2'
			$variant = 'Diamant_Project2'
		}
		else
		{
		#Yet to be developed: to include other projects
		#	$build_variant = 
		}
	}

	2{
		#Dont use for Project_mr now
		if($project -eq 'Project_mr')
		{
			$Build_variant = 'Type2'
			$variant = 'esp'
			$variant_path = 'Diamant_Type2'
		}
		#Developed for Type3, only use this now
		if($project -eq 'Type3')
		{
			$Build_variant = 'Project1'
			$variant = 'Diamant_Project1'
		}
		else
		{
		#Yet to be developed: to include other projects
		}
	}
	
	3{	
		#Yet to be developed		
	}
	
	4{	
		$Build_variant = 'Both'
		#$variant = 'esp'
	}
}


#**************************************************************************************

#Get stream details
[string]$currentstream = split-path -parent $MyInvocation.MyCommand.Path
[string]$currentstream_string = $currentstream
$currentstream_first, $currentstream_second = $currentstream -split('rb')
$xmlfile_path = $currentstream_first + 'rb\as\team_a\project_a\xmlfile\'

#Path to all the xml files that are to be updated
$FileName_GRA = $xmlfile_path + "\cfg\Diamant_Cfg\Diamant_Spec_Project\Diamant__GRA__PROJECT.xml"
#For Project_mr: $FileName_FWusedtxt = $xmlfile_path + "\cfg\Diamant_Cfg\" + $variant + "\"+ $variant_path +"\Diamant__FWUsed_"+ $Build_variant +"_BsSw.txt"
$FileName_Node = $xmlfile_path + "\cfg\Diamant_Cfg\Diamant_Spec_Project\Diamant__NODE__MBPC.xml"
$FileName_FWused = $xmlfile_path + "\cfg\Diamant_Cfg\" + $variant + "\Diamant__FWLINK__Used__PROJECT.xml"
$Dcodelink = $xmlfile_path + "\cfg\Diamant_Cfg\Diamant_Spec_Project\Diamant__DcodeLINK__PROJECT.xml"
#Get the Xml file generated by DSMPlus during CT testcase generation
$filePath = $xmlfile_path + "\tst\doc\DoorsExport\Gen\"
$search = "EXPORTED_DOORS_NODES_PRJ_REQ.xml"
$LogPath =  Get-ChildItem -Path $filePath -Filter $search -Recurse | 
			Where-Object { -not $_.PSIsContainer } | 
			Sort-Object -Property CreationTime | 
			Select-Object -Last 1 |
			Copy-Item -Destination $currentstream -Force
			
$Exported_Doors_xml = $currentstream + "\" + $search

#Check if the Xml exists, else there would be no input for the script
if(!(test-path $Exported_Doors_xml))
{
	Alert_Message("Xml generated from req not found ! Please check.")
	break
}


#Reading the xml files
$MainDB_GRA = New-Object System.Xml.XmlDocument
$MainDB_GRA.Load($FileName_GRA)
$MainDB_Node = New-Object System.Xml.XmlDocument
$MainDB_Node.Load($FileName_Node)
$MainDB_FWused = New-Object System.Xml.XmlDocument
$MainDB_FWused.Load($FileName_FWused)
$CalculatedDb_Doors_Xml = New-Object System.Xml.XmlDocument
$CalculatedDb_Doors_Xml.Load($Exported_Doors_xml)
$IsNodePresent = 0
$IsFWPresent = 0



#**************************************************************************************

#Decides if it is 'description_of_node' or 'parent_node_of' keywords
$Heading_needed = 0
#Decides if write to xml is needed
$Node_not_exist = 1
$FW_not_exist_in_xmlfileNode = 1
$FW_not_exist_in_xmlfileNode_previous = 1
$FW_not_active_Numerical = 1		#Holds values other than 0 and 1
$FW_not_active_Numerical_previous = 1
$FWorDcodeorNode_updated = 0
$GRAorNode_updated = 0
#Random coordinates for node with Node_Ecu as parent
$Input_range1 = 650..800
$Input_range2 = 2300..3000
#Random coordinates for node with Node_NetworkFlexray as parent
$Input_range3 = 3600..4500
$Input_range4 = 1900..2800
$Exclude = 3000 	#Exclude the value

#Closing tag of xml blocks
$pattern1 = '</NODE_LINKS>'
$pattern2 = '</PRJ_NODES>'
$pattern3 = '</NODES>'
$pattern4 = '</FW_LINK_PRJ_Dcode_REFS>'
$pattern6 = '</FW_LINK_PRJ_USEDFLAGS>'

#Initialize the variables
$FW_data = ''
$FW_data_for_Node = ''
$Dcode_FW = ''
$FW_data_BsSw_AppSw = ''
$GRA_Node_data = ''
$GRA_data = ''


#Checking if Node and FW are already present
foreach($Calc_Doors_Node in $CalculatedDb_Doors_Xml.DOORSREQ.SUBREQ.SUBREQ.SUBREQ)
{
	#Variable that decides if it is a new node implementation: inturn if xml update is needed
	$Node_not_exist = 1
	
	#To be cleared after each block is read
	$FWname = @(0) * 30
	$Prio = @(0) * 30
	$ParentNode = @(0) * 10
	$m = 0
	$n = 0
	$FW_not_active_Numerical = 1

	
	
	#Select only requirement blocks that are in CPSTATUS accepted state
	$Level1 = $Calc_Doors_Node.SelectSingleNode("CPSTATUS")
	[string]$Req_status = $Level1.InnerText
	if($Req_status -eq 'accepted')
	{

		foreach($Calc_Node in $Calc_Doors_Node.REQDESC) 
		{
			#Get the 4th <T> tag as that contains the FW name and prio for the first req set
			$Req_Link  = $Calc_Node.SelectSingleNode('T[4]')
			[string]$Node_Name = $Req_Link.InnerText -replace '\s+', ' '
			
			
			#If T[4] is empty, meaning it is not the Node description req block
			if($Node_Name -eq '')
			{
				#Get the parent node name which is usually in 3rd <T> tag 
				$Req_Link  = $Calc_Node.SelectSingleNode('T[3]')
				[string]$Node_Name = $Req_Link.InnerText -replace '\s+', ' '
				
				
				#If Node_Name is still empty, meaning it is not the 'Parent node' req block
				if($Node_Name -eq '')
				{
				$Heading_needed = 0
				#First req block contains 4 <T> tags, parent node has 3 <T> and then on only 1 <T> is present so use T[1]
				$Req_Link  = $Calc_Node.SelectSingleNode('T[1]')
				[string]$Node_Name = $Req_Link.InnerText -replace '\s+', ' '
				}
				else
				{
					#Update heading only if T[3] is not empty
					#Get the text heading 'ParentNodes_of_'
					$Heading_needed = 1
					$Heading = $Calc_Node.SelectSingleNode('T[1]')
					[string]$Heading_value = $Heading.InnerText -replace '\s+', ' '
				}
			
			}
			else		#Update heading only if T[4] is not empty
			{
				#For ease of use get the 'Description of Node_' text from 1st tag
				$Heading_needed = 1
				$Heading = $Calc_Node.SelectSingleNode('T[1]')
				[string]$Heading_value = $Heading.InnerText -replace '\s+', ' '
			
			}
		}
		#If its is a heading
		if($Heading_needed -eq 1)
		{
			$Node_Name = $Node_Name.Trim() #Remove starting and trailing spaces
		}
		
		#Remove starting and trailing spaces
		$Node_Name = $Node_Name.Trim() 
		
		
		
		##.............................Creating the documents..............................##		
		
		#IMP: Fetch Node details - MAIN IF PART !
		if($Heading_value -Match 'Description_of_Node_')
		{
			#Get the node name
			$Node = $Heading_value
			$Node = $Node -replace 'Description_of_', ''
			#Get the failureword name and priority
			$FWname[$m], $Prio[$m] = $Node_Name -split('\s')
			
			#Check if node is present already
			$Node_not_exist = Node_not_exist_check
			#Check in NODE xml if FW is present in node already
			$FW_not_exist_in_xmlfileNode = FW_not_exist_check($m)
			#$FW_not_active = 1 : FW not present at all, 3 : FW present in FWused xml and active, 6 : FW present but not active
			$FW_not_active_Numerical += FW_not_active_check($m)
			$FW_not_active_Numerical_previous = $FW_not_active_Numerical
			$FW_not_exist_in_xmlfileNode_previous = $FW_not_exist_in_xmlfileNode


if($Node_not_exist -and ($FW_not_active_Numerical -ne 3))
{

$FWorDcodeorNode_updated = 1
#Updating the diamant Xml files			
#DO NOT CHANGE FORMAT, DO NOT ADD TAB OR SPACE
###################################################################################################
###################################################################################################
#FW_data is only needed in Project_mr where GRA xml also contains the fw names
$FW_data += '        <FW_REF ctl="+" prio="'+$Prio[$m]+'">'+$FWname[$m]+'</FW_REF>
'

#This updates all FW details in node
$FW_data_for_Node += '        <FW_REF prio="'+$Prio[$m]+'">'+$FWname[$m]+'</FW_REF>
'

$Dcode_FW += "`n" + '      <FW_LINK_PRJ_Dcode_REF FW_REF="'+$FWname[$m]+'" Dcode_REF="Dcode_TBD" />'
$Dcode_FW >> "D:\TestFile.txt"

if($FW_not_active_Numerical -eq 1)
{
	#Only add this new line in xml if the FW is not present in the FWused xml
	$FW_data_BsSw_AppSw += "`n" + '      <FW_LINK_PRJ_USEDFLAG FW_REF="' + $FWname[$m] + '" USED="true" />'
}
elseif($FW_not_active_Numerical -eq 6)
{
	#If FW is present in FWused but not activated then just activate it
	Update_already_present_FWused_as_true	
}

###################################################################################################
###################################################################################################

}
		
			
			# IMP: Only change the counter after the XML update
			$m++
		}
		else	#IMP: Fetch Parent node details - MAIN ELSE PART !
		{
			#This else portion will have $Heading_value as 'ParentNodes_of_Node_'
			#Parent node names
			$ParentNode[$n] = $Node_Name
			
			#Change the coordinates based on parent node
			if($ParentNode[$n] -eq 'Node_Ecu')
			{
				$Random1 = $input_range1 | where-object { $Exclude -notcontains $_ }
				$Random2 = $input_range2 | where-object { $Exclude -notcontains $_ }
			}
			else
			{
				$Random1 = $input_range3 | where-object { $Exclude -notcontains $_ }
				$Random2 = $input_range4 | where-object { $Exclude -notcontains $_ }
			}
		
			#Check if it is new node implementation
			$Node_not_exist = Node_not_exist_check
			
			#Map the dummy node for NetworkFlexray
			if($ParentNode[$n] -eq 'Node_NetworkFlexray')
			{
				$ParentNode[$n] = 'Node_Network0'
			}


if($Node_not_exist -and ($FW_not_active_Numerical_previous -ne 3))
{
$GRAorNode_updated = 1				
#DO NOT CHANGE FORMAT, DO NOT ADD TAB OR SPACE
##############################################################################################
##############################################################################################

$GRA_Node_data += '    <NODE_LINK key="_UjY_'+$ParentNode[$n]+'_UjY__UjY_'+$Node+'" source="'+$ParentNode[$n]+'" target="'+$Node+'" />
'

$Random_num1 = Get-Random -InputObject $Random1
$Random_num2 = Get-Random -InputObject $Random2
#GRA xml information mra
$GRA_data = '    <PRJ_NODE>
      <COORDS>'+$Random_num1+','+$Random_num2+'</COORDS>
      <FUNCTION_ID_REFS />
      <VARIANT_CODE_REFS />
      <NODE_REF>Node_' + $Node + '</NODE_REF>
      <FW_REFS>'		

#Slight structural difference for beryllium projects
$GRA_data_beryllium = '    <PRJ_NODE>
      <NODE_REF>' + $Node + '</NODE_REF>
      <COORDS>'+$Random_num1+','+$Random_num2+'</COORDS>
      <FW_REFS />
      <FUNCTION_ID_REFS />
      <VARIANT_CODE_REFS />
    </PRJ_NODE>'

#Use this for only Project_mr
$GRA_end = '      </FW_REFS>
    </PRJ_NODE>'


#Adding up the data
$GRA_data = $GRA_data_beryllium		
#Use below code for Project_mr
#$GRA_data = $GRA_data + "'n" +$FW_data + $GRA_end # this is needed if fw name is added in GRA xml file like in Project_mr

#Node xml information
$pattern5 = '<NAME>'+ $Node +'</NAME>'				
$Node_data = '    <NODE>
	  <NAME>'+ $Node +'</NAME>
	  <CUSTOMER_REF>Cus_MBPC</CUSTOMER_REF>
	  <KEYLIST>
		<ITEM key="STATUSEXPORTTOAppSw">false</ITEM>
		<ITEM key="AppSwSETSINIT">false</ITEM>
		<ITEM key="FW_Priorities_Disabled">false</ITEM>
		<ITEM key="Desc" />
		<ITEM key="ALLOWEDRECOVERIES">0xFF</ITEM>
		<ITEM key="HWShutdown">NoHWShutdown</ITEM>
	  </KEYLIST>
	  <FUNCTION_ID_REFS />
	  <FW_REFS>
'+$FW_data_for_Node+'      </FW_REFS>
	</NODE>'

#As and when FW details are received, update to xml
Update_Node
$FW_data_for_Node = ''		#IMP: Clear the FW data after a node
		

	
#Update the data into GRA xml		
Update_GRA_Coordinates
#Clear the values after each node update
$FW_data = ''
$GRA_data = ''
##############################################################################################	
##############################################################################################
	
}
else		#IMP: clear the data to avoid some updates happening due to wrong swcs configuration
{
#If Node is not updated in spite of being a new node because last FW in it is an already active FW, then clear contents which are captured till now

<#	$FW_data = ''
	$FW_data_for_Node = ''
	$Dcode_FW = ''
	$FW_data_BsSw_AppSw = ''
#>
}		
			

			#IMP: Only change the counter after the GRA XML update
			$n++
		
		}#end of else statement

	}#end of If
	
	
}#end of For loop


if($FWorDcodeorNode_updated)
{
	#Update the FW used data
	if($build_variant -eq 'Both')
	{
		if($project -eq 'Project_mr')
		{
		$build_variant = 'Type1'
		$variant_path = 'Diamant_Type1'
		Update_FW_USED
		$build_variant = 'Type2'
		$variant_path = 'Diamant_Type2'
		Update_FW_USED
		$build_variant = 'Both'
		} 
		if($project -eq 'Type3')
		{
		$variant = 'Diamant_Project1'
		Update_FW_USED
		$variant = 'Diamant_Project2'
		Update_FW_USED
		$variant = 'Both_Project1_and_Project2'
		}
	}
	else
	{
		Update_FW_USED	
	}


	#Update the Dcode data
	Update_Dummy_Dcode
}

if($GRAorNode_updated)
{
	#Update GRA xml: node connections
	Update_GRA_SourceTarget		
	$GRA_Node_data = ''
}



#$Exported_Doors_xml >> "D:\TestFile.txt"
#$FW_data >> "D:\TestFile.txt"
#$GRA_data >> "D:\TestFile.txt"
#$Node_data >> "D:\TestFile.txt"

if(!($GRAorNode_updated -and $FWorDcodeorNode_updated))
{
	Alert_Message("No new Node or FW found in req! Script supports only new implementation! Please recheck your configuration.")
	break
}	  

$wshell = New-Object -ComObject wscript.shell
start-sleep 2
#Pop-up Message
$wshell.Popup("Update completed!!! Script will exit now!",10,"Message",0)

