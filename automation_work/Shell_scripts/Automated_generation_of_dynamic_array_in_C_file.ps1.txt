#Stream details and doc paths
[string]$currentstream = split-path -parent $MyInvocation.MyCommand.Path
[string]$currentstream_string = $currentstream
$currentstream_first, $currentstream_second = $currentstream -split('rb')


function FindData ($Val1,$Val2)
{ 
	#Read $Val1 for future use
	#  if($Val1){$v1='	,'}else{$v1='	'}
	#  if($Val1){$v3=''}else{$v3='		/* 0th index */'}
	if($Val2 -eq 1){$v2='	,C_variable_type_1'}
	if($Val2 -eq 2){$v2='	,C_variable_type_11'}
	if($Val2 -eq 3){$v2='	,C_variable_type_12'}
	if($Val2 -eq 4){$v2='	,C_variable_type_2'}
	$v3 = [string]$item.$Name
	$v = $v1+$v2+ '		//' + $v3
	return $v
}

#Find the latest Gen folder (based on time) to get the name of currently running build
$source = $currentstream_first + 'Gen\'
$search = 'Cfg_Includes_Compiler.txt'
$Current_build = Get-ChildItem -Path $source -Filter $search -Recurse | 
Where-Object { -not $_.PSIsContainer } | 
Sort-Object -Property CreationTime | 
Select-Object -Last 1 | % { $_.FullName }
$Current_build, $Current_build1 = $Current_build -split("\\make")	#Use two '\' to indicate that it is not '\m'
$Current_build1, $Current_build = $Current_build -split("Gen\\")	#Use two '\' inside the split function
#Pass the build name
$BuildName 	= $Current_build

#Write the generated file name to gen txt file to include it in compilation (refer MTCUserGuide for details)
$gen_txt = $currentstream_first + 'Gen\' + $BuildName + '\src_out\stream_file_1\generated_files.txt'
$string_value = "C_FILE;Gen\" + $BuildName + "\src_out\stream_file_1\GEN93_gen\Check_Generated.c;"
Add-content $gen_txt -Value $string_value -Encoding ascii

#Wait for gen/Gen9_3 folder creation
$gen_complete = $false
$count1 = 0
$Gen93_gen = $currentstream_first + 'Gen\' + $BuildName + '\src_out\stream_file_1\GEN93_gen\filename.c'
do{
	if(test-path $Gen93_gen)
	{ 
		$gen_complete = $true
		break
	}
	else
	{
		$count1++
		start-sleep 60		#Give -m if time is needed in millisec
	}
}while($count1 -lt 6)		#Change the max count value here to increase wait time

#Temporary file for content write
$GeneratedFilePath = $currentstream_first + 'Gen\' + $BuildName + '\src_out\stream_file_1\GEN93_gen\Check_Generated_temp.c'
#The name needed for generated file
$dest_file = $currentstream_first + 'Gen\' + $BuildName + '\src_out\stream_file_1\GEN93_gen\Check_Generated.c'
#Get Data_file path (input to script)
$Data_filePath = $currentstream_first + '\Gen\' + $BuildName + '\src_out\Data_file\Project.csv'


#Check if Data_file exists (if diamant generation was successful)
if((test-path $Data_filePath) -and ($gen_complete -eq $true))
{

#...............................Generic Data................................#
#............Part 1: add header inclusions here, if any.............#
#Direct write: do not modify the spacing
'/*
 * Check_Generated.c
 *
 *      Generated File
 *      Author: User1
 */

#include "Check.h"
' > $GeneratedFilePath

#.............Part 2: other measurement variables..................#
#Direct write: do not modify the spacing
"BOOL dumm1_B ;
/*[[MEASUREMENT*/
/*NAME=dumm1_B*/
/*MODEL_NAME=dumm1_B*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/

BOOL dumm2_B ;
/*[[MEASUREMENT*/
/*NAME=dumm2_B*/
/*MODEL_NAME=dumm2_B*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/


DefinedDatatype dumm3_I;
/*[[MEASUREMENT*/
/*NAME=dumm3_I*/
/*MODEL_NAME=dumm3_I*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/

DefinedDatatype dumm3_I_1;
/*[[MEASUREMENT*/
/*NAME=dumm3_I_1*/
/*MODEL_NAME=dumm3_I_1*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/
Dem_EventIdType dumm3_I_2;
/*[[MEASUREMENT*/
/*NAME=dumm3_I_2*/
/*MODEL_NAME=dumm3_I_2*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/

DefinedDatatype dumm4_I;
/*[[MEASUREMENT*/
/*NAME=dumm4_I*/
/*MODEL_NAME=dumm4_I*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/

uint8_t debug_var1;
/*[[MEASUREMENT*/
/*NAME=debug_var1*/
/*MODEL_NAME=debug_var1*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/

uint8_t debug_var2;
/*[[MEASUREMENT*/
/*NAME=debug_var1*/
/*MODEL_NAME=debug_var1*/
/*COMMENT= none'*/
/*MTEVENT= Task_x1*/
/*]]MEASUREMENT*/
" >> $GeneratedFilePath
#......................................#



#Temp file path to store Data_file data excluding unwanted header
$TempFile = $currentstream_first + '\Gen\' + $BuildName + '\src_out\Data_file\Temp.csv'
#Columns to choose from Data_file csv
$Name = 'Monitoring name'
$STM1 = 'State_1'
$STM2 = 'State_2'
$STM3 = 'State_3'
$STM4 = 'State_1_EVA2'
$STM5 = 'State_2_EVA2'



#Check build variant before file generation
if($BuildName -cmatch 'UHD')
{
#..................................For UHD..................................#

#Direct write: do not modify the spacing
'/**This is the generated array for UHD with actual FWs from Data_file**/
#if( RBFS_SystemVariant == RBFS_SystemVariant_UHD )
DefinedDatatype NewArray[]=
{
	C_variable_type_2		/* 0th index */' >> $GeneratedFilePath


Get-Content $Data_filePath | Select-Object -Skip 1 | Out-File $TempFile
$csvImport = Import-Csv $TempFile -Delimiter ';'
$NewFile = $csvImport | Select-Object 'State_1','State_2','State_3','Monitoring name'

$i = 0
$j = 1
foreach ($item in $NewFile)
{	
	
	#HMI Critical check
	if([string]$item.$STM1 -eq 'Off')
	{
		FindData $i 1 >> $GeneratedFilePath
		$i=1
	}
	else
	{	#HMI Rbs check
		if([string]$item.$STM2 -eq 'Off')
		{
			FindData $i 2 >> $GeneratedFilePath
			$i=1
		}
		else
		{	#HMI Evp check
			if([string]$item.$STM3 -eq 'Off')
			{
				FindData $i 2 >> $GeneratedFilePath
				$i=1
			}
			else
			{	
				if([string]$item.$Name -eq 'Exclusion_state1')
				{
					FindData $i 1 >> $GeneratedFilePath
					$i=1
					$j=0
				}	
				if(([string]$item.$Name -eq 'Exclusion_state2') -or ([string]$item.$Name -eq 'Exclusion_state3'))
				{
					FindData $i 2 >> $GeneratedFilePath
					$i=1
					$j=0
				}
				else
				{
					if($j)
					{
						FindData $i 4 >> $GeneratedFilePath
						$i=1
					}
				}
			#Set $j back to 1
			$j=1
			}
		}
	}
	
}#End of For loop
}#End of UHD file generation
else
{
#..................................For HD...................................#

#Direct write: do not modify the spacing
'/**This is the generated array for HD with actual FWs from Data_file**/
#if( RBFS_SystemVariant == RBFS_SystemVariant_HD )
Hmi_GCRbsTextSuppression_N Hmi_GC_FwsArray_N[]=
{
	C_variable_type_2		/* 0th index */' >> $GeneratedFilePath
#......................................#


Get-Content $Data_filePath | Select-Object -Skip 1 | Out-File $TempFile
$csvImport = Import-Csv $TempFile -Delimiter ';'
$NewFile = $csvImport | Select-Object 'State_1','State_2','State_3','Monitoring name','State_1_EVA2','State_2_EVA2'

$i = 0
$j = 1
foreach ($item in $NewFile)
{	

	#HMI Critical EVP check
	if([string]$item.$STM4 -eq 'Off')
	{
		FindData $i 1 >> $GeneratedFilePath
		$i=1
	}
	else
	{	#HMI Critical and Rbs EVP check
		if(([string]$item.$STM1 -eq 'Off') -and ([string]$item.$STM5 -eq 'Off'))
		{
			FindData $i 3 >> $GeneratedFilePath
			$i=1
		}
		else
		{	#HMI Evp check
			if(([string]$item.$STM2 -eq 'Off') -and ([string]$item.$STM5 -eq 'On'))
			{
				FindData $i 2 >> $GeneratedFilePath
				$i=1
			}
			else
			{
				if([string]$item.$Name -eq 'Force_Lamp_to_Red')
				{
					FindData $i 1 >> $GeneratedFilePath
					$i=1
					$j=0 
				}	
				if(([string]$item.$Name -eq 'Exclusion_state1') -or ([string]$item.$Name -eq 'Exclusion_state2') -or ([string]$item.$Name -eq 'Exclusion_fw1') -or ([string]$item.$Name -eq 'Exclusion_fw2'))
				{
					FindData $i 2 >> $GeneratedFilePath
					$i=1
					$j=0
				}
				else
				{
					if($j)
					{
						FindData $i 4 >> $GeneratedFilePath
						$i=1
						
					}
				}
			#Set $j back to 1
			$j=1
			
			}
		}
	}
		
}#End of For loop
}#End of HD file generation




#.............................................................#

#Adding 4 Replacement values and the array closure
'	,C_variable_type_2		//Replacement:1
	,C_variable_type_2		//Replacement:2
	,C_variable_type_2		//Replacement:3
	,C_variable_type_2		//Replacement:4
};
#endif' >> $GeneratedFilePath
Remove-item $TempFile

#Write to Gen with the correct encoding
Get-Content $GeneratedFilePath | Out-File $dest_file -Encoding ascii
#Remove temp file
Remove-item $GeneratedFilePath

}#End of Data_file generation check
